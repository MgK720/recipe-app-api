1. Fields
email (EmailField)
name (CharField)
is_active(BooleanField)
is_staff(BooleanField)

2. models.py (user) -> setting.py

setting.py :
    AUTH_USER_MODEL = 'core.User'

3. make migrations
    docker-compose run --rm app sh -c "python manage.py makemigrations"
    docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate"
Because django have own user model already migrated we need to clear this up
    list docker volumes and take app volume name
    docker volume ls
    docker volume rm recipe-app-api_dev-db-data
    Because it is already used:
    docker-compose down
    docker volume rm recipe-app-api_dev-db-data
    docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate"
Auto generated code in core/migrations/filename.py

# Generated by Django 3.2.25 on 2024-08-17 22:18

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]

4. Testing again
    docker-compose run --rm app sh -c "python manage.py test"

5. superuser support

6.Admin panel
    127.0.0.1:8000/admin

    creating superuser
    docker-compose run --rm app sh -c "python manage.py createsuperuser"
