1. PostgreSQL works well with Django

2. Architecture
Docker Compose:
 a> database (PostgreSQL)
 b> App (Django)

3. docker-compose.yml
depends_on:
      # it should wait for db component
      - db
  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      # This data should be secrets
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme

volumes:
  dev-db-data:

4. Setting env variables (pulling in settings.py)
psycopg2 - postgreSQL adaptor for Python (supported by Django)

how to install psycopg2?
    psycopg2-binary (good for development not for production)
    psycopg2 (compiles from source - required additional dependencies - easy to install with Docker)
        dependencies: C compiler, python3-dev, libpq-dev (from docs)
        dependencies: postgresql-client, build-base, postgresql-dev, musl-dev (packages for Alpine)
                      (all time required)(this 3 just for installing process)

we added this dependencies in dockerfile + in requirements.txt

docker-compose down
docker-compose build
docker-compose up

5.configure django settings.py
import os

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD')
    }
}


6.race condition 
problem w dockerfile - database moze nie zdążyć się uruchomić i wtedy warunek w komponencie app (ktory wymaga najpierw uruchomienia db) nie zostanie spełniony = django app sie nie uruchomi
rozwiązanie - wait for db - continue when database ready

    tests/test_commands.py
    management/commands/wait_for_db.py

    docker-compose run --rm app sh -c "python manage.py wait_for_db"

7. Database migrations
Django Orm - Object Relational Mapper, Abstraction layare for data
Django handles database structure and changes 

define models - generate migration files - setup database - store data

each model maps to a table

Models contain:
 - Name 
 - Fields
 - other metadata
 - custom Python logic

https://docs.djangoproject.com/en/5.0/topics/db/models/

Run it after wait_for_db !!!!
    python manage.py makemigrations
    python manage.py migrate